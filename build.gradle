#!groovy
// The above triggers groovy syntax highlighting in vim

buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
		classpath 'org.codehaus.groovy:groovy-all:2.3.4'
	}
}
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = '1.5'
targetCompatibility = '1.5'

group = "net.saliman"
archivesBaseName = "gradle-cobertura-plugin"
version = "2.2.5"
ext.isSnapshot = version.endsWith("SNAPSHOT")

if ( isSnapshot ) {
	println "using snapshot"
	ext.mavenCentralUploadUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
	println "using staging"
	ext.mavenCentralUploadUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

configurations {
	archives
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	compile localGroovy()
	compile gradleApi()
	testCompile 'junit:junit:4.10'
	testRuntime 'net.sourceforge.cobertura:cobertura:2.1.0-SNAPSHOT'
	archives "org.apache.maven.wagon:wagon-ssh:2.2"
	archives "org.apache.maven.wagon:wagon-ssh-external:2.2"
}

project.tasks.test.configure {
	includes = [ '**/*Test.class' ]
	useTestNG()
}
project.tasks.uploadArchives.dependsOn 'test'

task sourceJar(type: Jar) {
	description = "An archive of the source code for Maven Central"
	classifier = 'sources'
	from sourceSets.main.allSource
}

task groovydocJar(type: Jar) {
	description = "An archive of the GroovyDocs for Maven Central"
	classifier = 'javadoc'
	from groovydoc
}

artifacts {
	archives jar, groovydocJar, sourceJar
}

signing {
	sign configurations.archives
}

// Only *require* signing if we are uploading a non snapshot version.  If we
// do need to sign, make sure we've got the properties we need to do the
// signing.
import org.gradle.plugins.signing.Sign
gradle.taskGraph.whenReady { taskGraph ->
	tasks.withType(org.gradle.plugins.signing.Sign).all {
		required = taskGraph.hasTask(":uploadArchives") && !isSnapshot
		if ( required ) {
			// Use Java 6's console to read from the console (no good for a CI
			// environment)
			Console console = System.console()
			console.printf "\n\nWe have to sign some things in this build...\n\n"

			if ( !project.hasProperty('signing.keyId') ) {
				def id = console.readLine("PGP Public Key Id: ")
				allprojects { ext."signing.keyId" = id }
			}

			if ( !project.hasProperty('signing.secretKeyRingFile') ) {
				def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
				allprojects { ext."signing.secretKeyRingFile" = file }
			}

			if ( !project.hasProperty('signing.password') ) {
				def password = console.readPassword("PGP Private Key Password: ")
				allprojects { ext."signing.password" = password }
			}

			//def x = ext."signing.keyId"
			//println "using key ${x}"

			console.printf "\nThanks.\n\n"
		}
	}
}

uploadArchives {
	// We can't use taskGraph.whenReady because it doesn't resolve until after
	// configuration.  The startParameter is not as good, but it probably
	// good enough for our purposes.
	if ( gradle.startParameter.taskNames.contains("uploadArchives") ) {
		// Use Java 6's console to read from the console (no good for a CI
		// environment)
		Console console = System.console()
		console.printf "\n\nWe have to upload some things in this build...\n\n"

		if ( !project.hasProperty('mavenCentralUsername') ) {
			def mavenCentralUsername = console.readLine("Maven Central Username: ")
			allprojects { ext."mavenCentralUsername" = mavenCentralUsername }
		}

		if ( !project.hasProperty('mavenCentralPassword') ) {
			def mavenCentralPassword = console.readLine("Maven Central Password: ")
			allprojects { ext."mavenCentralPassword" = mavenCentralPassword }
		}

		repositories {
			mavenDeployer {
				if ( signing.signatory ) {
					beforeDeployment { signing.signPom(it) }
				}
				configuration = configurations.archives
				//repository(url: "file://$buildDir/m2repo")
				repository(url: mavenCentralUploadUrl) {
					authentication(userName: mavenCentralUsername,
									password: mavenCentralPassword)
					releases(updatePolicy: "always")
					snapshots(updatePolicy: "always")
				}
				pom.project(pomConfiguration)
			}
		}
	}
}


def getPomConfiguration() {
	return {
		name 'Gradle Cobertura Plugin'
		packaging 'jar'
		description 'A Gradle plugin for runing Cobertura coverage reports.'
		url 'https://github.com/stevesaliman/gradle-cobertura-plugin'
		licenses {
			license {
				name 'The Apache Software License, Version 2.0'
				url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
				distribution 'repo'
			}
		}
		developers {
			developer {
				id 'stevesaliman'
				name 'Steven C. Saliman'
				email 'support@saliman.net'
			}
		}
		scm {
			connection 'scm:https://stevesaliman@github.com/stevesaliman/gradle-cobertura-plugin'
			developerConnection 'scm:git@github.com:stevesaliman/gradle-cobertura-plugin.git'
			url 'https://github.com/stevesaliman/gradle-cobertura-plugin'
		}
	}
}

bintray {
	user = project.hasProperty('bintrayUsername') ? project.getProperty('bintrayUsername') : ''
	key = project.hasProperty('bintrayApiKey') ? project.getProperty('bintrayApiKey') : ''

	configurations = [ 'archives' ]

	pkg {
		repo = 'gradle-plugins'
		name = 'gradle-cobertura-plugin'
		licenses = [ 'Apache-2.0' ]
		desc = 'A Gradle plugin for programmatically managing Jenkins instances.'
		websiteUrl = 'https://github.com/stevesaliman/gradle-cobertura-plugin'
		issueTrackerUrl = 'https://github.com/stevesaliman/gradle-cobertura-plugin/issues'
		vcsUrl = 'https://github.com/stevesaliman/gradle-cobertura-plugin.git'
		labels = [ 'cobertura', 'coverage' ]
		publicDownloadNumbers = true
		version {
			name = version
			vcsTag = version
			attributes = [
							'gradle-plugin': 'net.saliman.cobertura:net.saliman:gradle-cobertura-plugin'
			]
		}
	}
}



